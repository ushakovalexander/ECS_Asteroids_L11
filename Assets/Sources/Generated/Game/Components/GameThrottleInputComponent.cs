//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity throttleInputEntity { get { return GetGroup(GameMatcher.ThrottleInput).GetSingleEntity(); } }
    public ThrottleInputComponent throttleInput { get { return throttleInputEntity.throttleInput; } }
    public bool hasThrottleInput { get { return throttleInputEntity != null; } }

    public GameEntity SetThrottleInput(float newValue) {
        if (hasThrottleInput) {
            throw new Entitas.EntitasException("Could not set ThrottleInput!\n" + this + " already has an entity with ThrottleInputComponent!",
                "You should check if the context already has a throttleInputEntity before setting it or use context.ReplaceThrottleInput().");
        }
        var entity = CreateEntity();
        entity.AddThrottleInput(newValue);
        return entity;
    }

    public void ReplaceThrottleInput(float newValue) {
        var entity = throttleInputEntity;
        if (entity == null) {
            entity = SetThrottleInput(newValue);
        } else {
            entity.ReplaceThrottleInput(newValue);
        }
    }

    public void RemoveThrottleInput() {
        throttleInputEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ThrottleInputComponent throttleInput { get { return (ThrottleInputComponent)GetComponent(GameComponentsLookup.ThrottleInput); } }
    public bool hasThrottleInput { get { return HasComponent(GameComponentsLookup.ThrottleInput); } }

    public void AddThrottleInput(float newValue) {
        var index = GameComponentsLookup.ThrottleInput;
        var component = CreateComponent<ThrottleInputComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceThrottleInput(float newValue) {
        var index = GameComponentsLookup.ThrottleInput;
        var component = CreateComponent<ThrottleInputComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveThrottleInput() {
        RemoveComponent(GameComponentsLookup.ThrottleInput);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherThrottleInput;

    public static Entitas.IMatcher<GameEntity> ThrottleInput {
        get {
            if (_matcherThrottleInput == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ThrottleInput);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherThrottleInput = matcher;
            }

            return _matcherThrottleInput;
        }
    }
}
